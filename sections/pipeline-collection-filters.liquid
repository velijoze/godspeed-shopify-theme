{% comment %}
  Pipeline Advanced Collection Filters
  Professional filtering sidebar with price ranges, sizes, colors
{% endcomment %}

<div class="pipeline-filters-sidebar" data-pipeline-filters>
  
  <div class="filters-header">
    <h2 class="filters-title">{{ section.settings.filter_title | default: 'Filter Products' }}</h2>
    <button class="filters-clear" data-clear-filters>
      Clear All
    </button>
  </div>

  <div class="active-filters" data-active-filters style="display: none;">
    <div class="active-filters__list"></div>
  </div>

  <div class="filter-groups">
    
    {%- comment -%} Price Range Filter {%- endcomment -%}
    <details class="filter-group" open>
      <summary class="filter-group__header">
        <span>Price</span>
        <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
          <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
      </summary>
      <div class="filter-group__content">
        <div class="price-range-filter">
          <div class="price-inputs">
            <input type="number" 
                   class="price-input" 
                   id="price-min" 
                   placeholder="Min"
                   min="0"
                   data-price-min>
            <span class="price-separator">-</span>
            <input type="number" 
                   class="price-input" 
                   id="price-max" 
                   placeholder="Max"
                   data-price-max>
          </div>
          <div class="price-slider" data-price-slider>
            <div class="slider-track">
              <div class="slider-range" data-slider-range></div>
            </div>
            <input type="range" class="slider-input" data-slider-min min="0" max="1000" value="0">
            <input type="range" class="slider-input" data-slider-max min="0" max="1000" value="1000">
          </div>
          <div class="price-presets">
            <button class="price-preset" data-preset="0-50">Under $50</button>
            <button class="price-preset" data-preset="50-100">$50 - $100</button>
            <button class="price-preset" data-preset="100-250">$100 - $250</button>
            <button class="price-preset" data-preset="250+">$250+</button>
          </div>
        </div>
      </div>
    </details>

    {%- comment -%} Availability Filter {%- endcomment -%}
    <details class="filter-group">
      <summary class="filter-group__header">
        <span>Availability</span>
        <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
          <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
        </svg>
      </summary>
      <div class="filter-group__content">
        <label class="filter-checkbox">
          <input type="checkbox" name="availability" value="in-stock" data-filter="availability">
          <span class="checkbox-custom"></span>
          <span class="filter-label">In Stock</span>
          <span class="filter-count">({{ collections.all.products_count }})</span>
        </label>
        <label class="filter-checkbox">
          <input type="checkbox" name="availability" value="out-of-stock" data-filter="availability">
          <span class="checkbox-custom"></span>
          <span class="filter-label">Out of Stock</span>
          <span class="filter-count">(0)</span>
        </label>
      </div>
    </details>

    {%- comment -%} Product Type Filter {%- endcomment -%}
    {%- if collection.all_types.size > 0 -%}
      <details class="filter-group">
        <summary class="filter-group__header">
          <span>Product Type</span>
          <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
            <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
        </summary>
        <div class="filter-group__content">
          {%- for type in collection.all_types -%}
            <label class="filter-checkbox">
              <input type="checkbox" name="type" value="{{ type | handle }}" data-filter="type">
              <span class="checkbox-custom"></span>
              <span class="filter-label">{{ type }}</span>
              <span class="filter-count">({{ collection.products | where: 'type', type | size }})</span>
            </label>
          {%- endfor -%}
        </div>
      </details>
    {%- endif -%}

    {%- comment -%} Brand/Vendor Filter {%- endcomment -%}
    {%- if collection.all_vendors.size > 0 -%}
      <details class="filter-group">
        <summary class="filter-group__header">
          <span>Brand</span>
          <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
            <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
        </summary>
        <div class="filter-group__content">
          {%- for vendor in collection.all_vendors -%}
            <label class="filter-checkbox">
              <input type="checkbox" name="vendor" value="{{ vendor | handle }}" data-filter="vendor">
              <span class="checkbox-custom"></span>
              <span class="filter-label">{{ vendor }}</span>
              <span class="filter-count">({{ collection.products | where: 'vendor', vendor | size }})</span>
            </label>
          {%- endfor -%}
        </div>
      </details>
    {%- endif -%}

    {%- comment -%} Size Filter (if applicable) {%- endcomment -%}
    {%- assign sizes = 'XS,S,M,L,XL,XXL' | split: ',' -%}
    {%- assign has_sizes = false -%}
    {%- for product in collection.products -%}
      {%- if product.options contains 'Size' -%}
        {%- assign has_sizes = true -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}
    
    {%- if has_sizes -%}
      <details class="filter-group">
        <summary class="filter-group__header">
          <span>Size</span>
          <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
            <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
        </summary>
        <div class="filter-group__content">
          <div class="size-grid">
            {%- for size in sizes -%}
              <label class="size-option">
                <input type="checkbox" name="size" value="{{ size }}" data-filter="size">
                <span class="size-box">{{ size }}</span>
              </label>
            {%- endfor -%}
          </div>
        </div>
      </details>
    {%- endif -%}

    {%- comment -%} Color Filter (if applicable) {%- endcomment -%}
    {%- assign colors = 'Black,White,Red,Blue,Green,Yellow,Orange,Purple,Pink,Gray' | split: ',' -%}
    {%- assign has_colors = false -%}
    {%- for product in collection.products -%}
      {%- if product.options contains 'Color' -%}
        {%- assign has_colors = true -%}
        {%- break -%}
      {%- endif -%}
    {%- endfor -%}
    
    {%- if has_colors -%}
      <details class="filter-group">
        <summary class="filter-group__header">
          <span>Color</span>
          <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
            <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
        </summary>
        <div class="filter-group__content">
          <div class="color-grid">
            {%- for color in colors -%}
              <label class="color-option" title="{{ color }}">
                <input type="checkbox" name="color" value="{{ color | downcase }}" data-filter="color">
                <span class="color-swatch" style="background-color: {{ color | downcase }}"></span>
              </label>
            {%- endfor -%}
          </div>
        </div>
      </details>
    {%- endif -%}

    {%- comment -%} Tags Filter {%- endcomment -%}
    {%- if collection.all_tags.size > 0 -%}
      <details class="filter-group">
        <summary class="filter-group__header">
          <span>Features</span>
          <svg class="filter-group__icon" width="12" height="8" viewBox="0 0 12 8" fill="currentColor">
            <path d="M1 1L6 6L11 1" stroke="currentColor" stroke-width="2" fill="none"/>
          </svg>
        </summary>
        <div class="filter-group__content">
          {%- for tag in collection.all_tags limit: 10 -%}
            {%- unless tag contains 'spec:' -%}
              <label class="filter-checkbox">
                <input type="checkbox" name="tag" value="{{ tag | handle }}" data-filter="tag">
                <span class="checkbox-custom"></span>
                <span class="filter-label">{{ tag }}</span>
              </label>
            {%- endunless -%}
          {%- endfor -%}
        </div>
      </details>
    {%- endif -%}

  </div>

  <div class="filters-footer">
    <button class="apply-filters-btn" data-apply-filters>
      Apply Filters
    </button>
  </div>

</div>

<style>
  .pipeline-filters-sidebar {
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 8px;
    padding: 1.5rem;
    position: sticky;
    top: 2rem;
    height: fit-content;
    max-height: calc(100vh - 4rem);
    overflow-y: auto;
  }

  .filters-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-bottom: 1.5rem;
    padding-bottom: 1rem;
    border-bottom: 2px solid #f3f4f6;
  }

  .filters-title {
    font-size: 1.25rem;
    font-weight: 700;
    color: #111827;
    margin: 0;
  }

  .filters-clear {
    font-size: 0.875rem;
    color: #667eea;
    background: none;
    border: none;
    cursor: pointer;
    font-weight: 500;
    transition: color 0.2s ease;
  }

  .filters-clear:hover {
    color: #5a67d8;
    text-decoration: underline;
  }

  .active-filters {
    margin-bottom: 1.5rem;
    padding: 1rem;
    background: #f9fafb;
    border-radius: 6px;
  }

  .active-filters__list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .active-filter-tag {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.375rem 0.75rem;
    background: white;
    border: 1px solid #e5e7eb;
    border-radius: 20px;
    font-size: 0.875rem;
    color: #4b5563;
  }

  .active-filter-tag button {
    background: none;
    border: none;
    cursor: pointer;
    color: #9ca3af;
    font-weight: bold;
    padding: 0;
    font-size: 1rem;
    line-height: 1;
  }

  .filter-groups {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
  }

  .filter-group {
    border: 1px solid #e5e7eb;
    border-radius: 6px;
    overflow: hidden;
    transition: all 0.2s ease;
  }

  .filter-group[open] {
    border-color: #667eea;
    box-shadow: 0 2px 8px rgba(102, 126, 234, 0.1);
  }

  .filter-group__header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1rem;
    cursor: pointer;
    font-weight: 600;
    color: #111827;
    background: white;
    transition: all 0.2s ease;
    list-style: none;
  }

  .filter-group__header::-webkit-details-marker {
    display: none;
  }

  .filter-group__header:hover {
    background: #f9fafb;
  }

  .filter-group[open] .filter-group__header {
    background: #f9fafb;
    border-bottom: 1px solid #e5e7eb;
  }

  .filter-group__icon {
    transition: transform 0.2s ease;
  }

  .filter-group[open] .filter-group__icon {
    transform: rotate(180deg);
  }

  .filter-group__content {
    padding: 1rem;
  }

  /* Price Range Filter */
  .price-range-filter {
    display: flex;
    flex-direction: column;
    gap: 1rem;
  }

  .price-inputs {
    display: flex;
    align-items: center;
    gap: 0.75rem;
  }

  .price-input {
    flex: 1;
    padding: 0.5rem;
    border: 1px solid #e5e7eb;
    border-radius: 4px;
    font-size: 0.875rem;
    text-align: center;
  }

  .price-input:focus {
    outline: none;
    border-color: #667eea;
  }

  .price-separator {
    color: #9ca3af;
  }

  .price-slider {
    position: relative;
    height: 40px;
    margin: 1rem 0;
  }

  .slider-track {
    position: absolute;
    top: 50%;
    transform: translateY(-50%);
    width: 100%;
    height: 4px;
    background: #e5e7eb;
    border-radius: 2px;
  }

  .slider-range {
    position: absolute;
    height: 100%;
    background: #667eea;
    border-radius: 2px;
  }

  .slider-input {
    position: absolute;
    width: 100%;
    top: 50%;
    transform: translateY(-50%);
    -webkit-appearance: none;
    appearance: none;
    background: transparent;
    pointer-events: none;
  }

  .slider-input::-webkit-slider-thumb {
    -webkit-appearance: none;
    appearance: none;
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: white;
    border: 2px solid #667eea;
    cursor: pointer;
    pointer-events: all;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .slider-input::-moz-range-thumb {
    width: 20px;
    height: 20px;
    border-radius: 50%;
    background: white;
    border: 2px solid #667eea;
    cursor: pointer;
    pointer-events: all;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
  }

  .price-presets {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 0.5rem;
  }

  .price-preset {
    padding: 0.5rem;
    border: 1px solid #e5e7eb;
    background: white;
    border-radius: 4px;
    font-size: 0.8125rem;
    color: #4b5563;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .price-preset:hover {
    border-color: #667eea;
    color: #667eea;
    background: #f8f9ff;
  }

  .price-preset.active {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  /* Checkbox Filters */
  .filter-checkbox {
    display: flex;
    align-items: center;
    padding: 0.5rem 0;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .filter-checkbox:hover {
    color: #667eea;
  }

  .filter-checkbox input {
    display: none;
  }

  .checkbox-custom {
    width: 18px;
    height: 18px;
    border: 2px solid #e5e7eb;
    border-radius: 3px;
    margin-right: 0.75rem;
    position: relative;
    transition: all 0.2s ease;
  }

  .filter-checkbox input:checked + .checkbox-custom {
    background: #667eea;
    border-color: #667eea;
  }

  .filter-checkbox input:checked + .checkbox-custom:after {
    content: "✓";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    color: white;
    font-size: 12px;
    font-weight: bold;
  }

  .filter-label {
    flex: 1;
    font-size: 0.875rem;
    color: #374151;
  }

  .filter-count {
    font-size: 0.8125rem;
    color: #9ca3af;
  }

  /* Size Grid */
  .size-grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 0.5rem;
  }

  .size-option {
    position: relative;
  }

  .size-option input {
    display: none;
  }

  .size-box {
    display: block;
    padding: 0.75rem;
    border: 1px solid #e5e7eb;
    border-radius: 4px;
    text-align: center;
    font-size: 0.875rem;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .size-option input:checked + .size-box {
    background: #667eea;
    color: white;
    border-color: #667eea;
  }

  .size-box:hover {
    border-color: #667eea;
  }

  /* Color Grid */
  .color-grid {
    display: grid;
    grid-template-columns: repeat(5, 1fr);
    gap: 0.5rem;
  }

  .color-option {
    position: relative;
  }

  .color-option input {
    display: none;
  }

  .color-swatch {
    display: block;
    width: 32px;
    height: 32px;
    border-radius: 50%;
    border: 2px solid #e5e7eb;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .color-option input:checked + .color-swatch {
    border-color: #111827;
    box-shadow: 0 0 0 3px rgba(0, 0, 0, 0.1);
  }

  .filters-footer {
    margin-top: 2rem;
    padding-top: 1.5rem;
    border-top: 1px solid #e5e7eb;
  }

  .apply-filters-btn {
    width: 100%;
    padding: 0.875rem;
    background: #667eea;
    color: white;
    border: none;
    border-radius: 6px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.2s ease;
  }

  .apply-filters-btn:hover {
    background: #5a67d8;
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(102, 126, 234, 0.3);
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .pipeline-filters-sidebar {
      position: fixed;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      max-height: 100vh;
      border-radius: 0;
      transform: translateX(-100%);
      transition: transform 0.3s ease;
      z-index: 1000;
    }
    
    .pipeline-filters-sidebar.open {
      transform: translateX(0);
    }
    
    .size-grid {
      grid-template-columns: repeat(4, 1fr);
    }
    
    .color-grid {
      grid-template-columns: repeat(6, 1fr);
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const filtersContainer = document.querySelector('[data-pipeline-filters]');
  if (!filtersContainer) return;

  // Price slider functionality
  const priceSlider = filtersContainer.querySelector('[data-price-slider]');
  if (priceSlider) {
    const minSlider = filtersContainer.querySelector('[data-slider-min]');
    const maxSlider = filtersContainer.querySelector('[data-slider-max]');
    const minInput = filtersContainer.querySelector('[data-price-min]');
    const maxInput = filtersContainer.querySelector('[data-price-max]');
    const sliderRange = filtersContainer.querySelector('[data-slider-range]');

    function updateSlider() {
      const minVal = parseInt(minSlider.value);
      const maxVal = parseInt(maxSlider.value);
      
      if (minVal > maxVal) {
        minSlider.value = maxVal;
        return;
      }
      
      const minPercent = (minVal / 1000) * 100;
      const maxPercent = (maxVal / 1000) * 100;
      
      sliderRange.style.left = minPercent + '%';
      sliderRange.style.width = (maxPercent - minPercent) + '%';
      
      minInput.value = minVal;
      maxInput.value = maxVal;
    }

    minSlider.addEventListener('input', updateSlider);
    maxSlider.addEventListener('input', updateSlider);
    
    minInput.addEventListener('change', function() {
      minSlider.value = this.value;
      updateSlider();
    });
    
    maxInput.addEventListener('change', function() {
      maxSlider.value = this.value;
      updateSlider();
    });
  }

  // Price presets
  const presets = filtersContainer.querySelectorAll('[data-preset]');
  presets.forEach(preset => {
    preset.addEventListener('click', function() {
      const range = this.dataset.preset;
      let min = 0, max = 1000;
      
      if (range.includes('-')) {
        [min, max] = range.split('-').map(v => parseInt(v));
      } else if (range.includes('+')) {
        min = parseInt(range);
        max = 1000;
      }
      
      minSlider.value = min;
      maxSlider.value = max;
      updateSlider();
      
      presets.forEach(p => p.classList.remove('active'));
      this.classList.add('active');
    });
  });

  // Filter application
  const applyButton = filtersContainer.querySelector('[data-apply-filters]');
  const clearButton = filtersContainer.querySelector('[data-clear-filters]');
  const activeFiltersContainer = filtersContainer.querySelector('[data-active-filters]');

  function collectFilters() {
    const filters = {};
    
    // Collect checkbox filters
    filtersContainer.querySelectorAll('input[type="checkbox"]:checked').forEach(input => {
      const filterType = input.dataset.filter;
      if (!filters[filterType]) filters[filterType] = [];
      filters[filterType].push(input.value);
    });
    
    // Collect price range
    const minPrice = minInput ? minInput.value : 0;
    const maxPrice = maxInput ? maxInput.value : 1000;
    if (minPrice > 0 || maxPrice < 1000) {
      filters.price = `${minPrice}-${maxPrice}`;
    }
    
    return filters;
  }

  function updateActiveFilters() {
    const filters = collectFilters();
    const filtersList = activeFiltersContainer.querySelector('.active-filters__list');
    filtersList.innerHTML = '';
    
    let hasFilters = false;
    
    Object.entries(filters).forEach(([key, values]) => {
      if (Array.isArray(values)) {
        values.forEach(value => {
          hasFilters = true;
          const tag = document.createElement('div');
          tag.className = 'active-filter-tag';
          tag.innerHTML = `
            <span>${key}: ${value}</span>
            <button data-remove-filter="${key}" data-value="${value}">×</button>
          `;
          filtersList.appendChild(tag);
        });
      } else {
        hasFilters = true;
        const tag = document.createElement('div');
        tag.className = 'active-filter-tag';
        tag.innerHTML = `
          <span>Price: $${values}</span>
          <button data-remove-filter="${key}">×</button>
        `;
        filtersList.appendChild(tag);
      }
    });
    
    activeFiltersContainer.style.display = hasFilters ? 'block' : 'none';
    
    // Add remove filter functionality
    filtersList.querySelectorAll('[data-remove-filter]').forEach(btn => {
      btn.addEventListener('click', function() {
        const filterType = this.dataset.removeFilter;
        const value = this.dataset.value;
        
        if (filterType === 'price') {
          minSlider.value = 0;
          maxSlider.value = 1000;
          updateSlider();
        } else {
          const input = filtersContainer.querySelector(`input[data-filter="${filterType}"][value="${value}"]`);
          if (input) input.checked = false;
        }
        
        updateActiveFilters();
        applyFilters();
      });
    });
  }

  function applyFilters() {
    const filters = collectFilters();
    
    // Build URL parameters
    const params = new URLSearchParams(window.location.search);
    
    // Clear existing filter params
    ['type', 'vendor', 'size', 'color', 'tag', 'price', 'availability'].forEach(key => {
      params.delete(key);
    });
    
    // Add new filter params
    Object.entries(filters).forEach(([key, values]) => {
      if (Array.isArray(values)) {
        values.forEach(value => {
          params.append(key, value);
        });
      } else {
        params.set(key, values);
      }
    });
    
    // Reload page with new filters
    window.location.search = params.toString();
  }

  if (applyButton) {
    applyButton.addEventListener('click', applyFilters);
  }

  if (clearButton) {
    clearButton.addEventListener('click', function() {
      // Clear all checkboxes
      filtersContainer.querySelectorAll('input[type="checkbox"]').forEach(input => {
        input.checked = false;
      });
      
      // Reset price range
      if (minSlider && maxSlider) {
        minSlider.value = 0;
        maxSlider.value = 1000;
        updateSlider();
      }
      
      // Clear presets
      presets.forEach(p => p.classList.remove('active'));
      
      // Apply empty filters
      applyFilters();
    });
  }

  // Initialize active filters on page load
  updateActiveFilters();
});
</script>

{% schema %}
{
  "name": "Pipeline Collection Filters",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "text",
      "id": "filter_title",
      "default": "Filter Products",
      "label": "Filter section title"
    },
    {
      "type": "checkbox",
      "id": "show_price_filter",
      "default": true,
      "label": "Show price filter"
    },
    {
      "type": "checkbox",
      "id": "show_availability_filter",
      "default": true,
      "label": "Show availability filter"
    },
    {
      "type": "checkbox",
      "id": "show_type_filter",
      "default": true,
      "label": "Show product type filter"
    },
    {
      "type": "checkbox",
      "id": "show_vendor_filter",
      "default": true,
      "label": "Show brand filter"
    },
    {
      "type": "checkbox",
      "id": "show_size_filter",
      "default": true,
      "label": "Show size filter"
    },
    {
      "type": "checkbox",
      "id": "show_color_filter",
      "default": true,
      "label": "Show color filter"
    },
    {
      "type": "checkbox",
      "id": "show_tag_filter",
      "default": true,
      "label": "Show tag filter"
    },
    {
      "type": "range",
      "id": "max_price",
      "min": 100,
      "max": 5000,
      "step": 100,
      "default": 1000,
      "label": "Maximum price for slider"
    }
  ],
  "presets": [
    {
      "name": "Pipeline Collection Filters"
    }
  ]
}
{% endschema %}