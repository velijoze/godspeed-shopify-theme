{% comment %}
  Pipeline Collection Grid
  Enhanced product grid with filters and Pipeline product cards
{% endcomment %}

<div class="pipeline-collection-container section-{{ section.id }}-padding color-{{ section.settings.color_scheme }}">
  <div class="page-width">
    
    <div class="collection-layout">
      
      {%- if section.settings.show_filters -%}
        <!-- Filters Sidebar -->
        <div class="collection-sidebar">
          {% render 'sections/pipeline-collection-filters.liquid', section: section %}
        </div>
      {%- endif -%}

      <!-- Product Grid -->
      <div class="collection-main">
        
        {%- if section.settings.show_progress_bar -%}
          <div class="loading-progress" data-loading-progress style="display: none;">
            <div class="progress-bar">
              <div class="progress-fill" data-progress-fill></div>
            </div>
            <div class="progress-text">Loading products...</div>
          </div>
        {%- endif -%}

        <div id="ProductGridContainer" data-products-container>
          {%- paginate collection.products by section.settings.products_per_page -%}
            
            <div class="collection-grid grid grid--{{ section.settings.columns_mobile }}-col-tablet-down grid--{{ section.settings.columns_desktop }}-col-desktop" 
                 data-collection-grid
                 data-view="grid">
              
              {%- liquid
                case section.settings.columns_desktop
                  when 2
                    assign desktop_columns = 'grid--2-col-desktop'
                  when 3
                    assign desktop_columns = 'grid--3-col-desktop'
                  when 4
                    assign desktop_columns = 'grid--4-col-desktop'
                  when 5
                    assign desktop_columns = 'grid--5-col-desktop'
                  else
                    assign desktop_columns = 'grid--4-col-desktop'
                endcase
              -%}
              
              {%- for product in collection.products -%}
                <div class="grid__item card-wrapper">
                  {% render 'card-product-pipeline',
                    card_product: product,
                    media_aspect_ratio: section.settings.image_ratio,
                    image_shape: section.settings.image_shape,
                    show_secondary_image: section.settings.show_secondary_image,
                    show_vendor: section.settings.show_vendor,
                    show_rating: section.settings.show_rating,
                    show_quick_add: section.settings.quick_add,
                    show_quick_view: section.settings.show_quick_view,
                    show_badges: section.settings.show_badges,
                    show_wishlist: section.settings.show_wishlist,
                    section_id: section.id
                  %}
                </div>
              {%- else -%}
                <div class="collection-empty">
                  <div class="empty-state">
                    <div class="empty-icon">
                      <svg width="48" height="48" viewBox="0 0 48 48" fill="currentColor">
                        <path d="M24 4C12.96 4 4 12.96 4 24s8.96 20 20 20 20-8.96 20-20S35.04 4 24 4zm0 36c-8.84 0-16-7.16-16-16S15.16 8 24 8s16 7.16 16 16-7.16 16-16 16zM15.5 18l2.5 2.5L20.5 18l2.5 2.5L25.5 18l2.5 2.5L30.5 18"/>
                      </svg>
                    </div>
                    <h3 class="empty-title">{{ 'collections.general.no_matches' | t | default: 'No products found' }}</h3>
                    <p class="empty-text">{{ 'collections.general.no_matches_text' | t | default: 'Use fewer filters or remove all to view products' }}</p>
                    <button class="btn btn--primary" data-clear-all-filters>
                      {{ 'collections.general.clear_all' | t | default: 'Clear all filters' }}
                    </button>
                  </div>
                </div>
              {%- endfor -%}
            </div>

            {%- if paginate.pages > 1 -%}
              <div class="pagination-wrapper">
                {%- if section.settings.enable_infinite_scroll -%}
                  <div class="load-more-container" data-load-more-container>
                    {%- if paginate.next -%}
                      <button class="load-more-btn" data-load-more data-url="{{ paginate.next.url }}">
                        <span class="load-more-text">{{ 'collections.general.load_more' | t | default: 'Load More Products' }}</span>
                        <span class="load-more-spinner" style="display: none;">
                          <svg width="20" height="20" viewBox="0 0 24 24" fill="currentColor">
                            <path d="M12 2V6M12 18V22M4.93 4.93L7.76 7.76M16.24 16.24L19.07 19.07M2 12H6M18 12H22M4.93 19.07L7.76 16.24M16.24 7.76L19.07 4.93" stroke="currentColor" stroke-width="2" stroke-linecap="round"/>
                          </svg>
                        </span>
                      </button>
                      <div class="load-more-info">
                        {{ 'collections.general.showing' | t: current: paginate.current_offset | plus: paginate.page_size, total: collection.products_count | default: 'Showing [current] of [total] products' }}
                      </div>
                    {%- else -%}
                      <div class="all-products-loaded">
                        {{ 'collections.general.all_products_loaded' | t | default: 'All products loaded' }}
                      </div>
                    {%- endif -%}
                  </div>
                {%- else -%}
                  {% render 'pagination', paginate: paginate, anchor: '' %}
                {%- endif -%}
              </div>
            {%- endif -%}

          {%- endpaginate -%}
        </div>

      </div>
    </div>

  </div>
</div>

<style>
  .pipeline-collection-container {
    margin-top: 0;
  }

  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }

  .collection-layout {
    display: grid;
    gap: 3rem;
  }

  .collection-layout.has-filters {
    grid-template-columns: 280px 1fr;
  }

  .collection-layout:not(.has-filters) {
    grid-template-columns: 1fr;
  }

  .collection-sidebar {
    position: relative;
  }

  .collection-main {
    min-width: 0;
  }

  .loading-progress {
    margin-bottom: 2rem;
    text-align: center;
  }

  .progress-bar {
    width: 100%;
    height: 4px;
    background: #e5e7eb;
    border-radius: 2px;
    overflow: hidden;
    margin-bottom: 1rem;
  }

  .progress-fill {
    height: 100%;
    background: linear-gradient(90deg, #667eea, #764ba2);
    width: 0%;
    transition: width 0.3s ease;
  }

  .progress-text {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .collection-grid {
    margin-bottom: 3rem;
  }

  .collection-empty {
    grid-column: 1 / -1;
    padding: 4rem 2rem;
    text-align: center;
  }

  .empty-state {
    max-width: 400px;
    margin: 0 auto;
  }

  .empty-icon {
    font-size: 3rem;
    color: #d1d5db;
    margin-bottom: 1.5rem;
  }

  .empty-title {
    font-size: 1.5rem;
    font-weight: 600;
    color: #111827;
    margin-bottom: 1rem;
  }

  .empty-text {
    color: #6b7280;
    margin-bottom: 2rem;
    line-height: 1.6;
  }

  .pagination-wrapper {
    display: flex;
    justify-content: center;
    margin-top: 2rem;
  }

  .load-more-container {
    text-align: center;
  }

  .load-more-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem 2rem;
    background: white;
    border: 2px solid #e5e7eb;
    border-radius: 50px;
    font-weight: 600;
    color: #374151;
    cursor: pointer;
    transition: all 0.3s ease;
    margin-bottom: 1rem;
  }

  .load-more-btn:hover {
    border-color: #667eea;
    color: #667eea;
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
  }

  .load-more-btn:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  .load-more-spinner {
    animation: spin 1s linear infinite;
  }

  .load-more-info {
    font-size: 0.875rem;
    color: #6b7280;
  }

  .all-products-loaded {
    padding: 1rem;
    color: #22c55e;
    font-weight: 500;
  }

  @keyframes spin {
    from { transform: rotate(0deg); }
    to { transform: rotate(360deg); }
  }

  /* Mobile Styles */
  @media (max-width: 768px) {
    .collection-layout {
      grid-template-columns: 1fr !important;
      gap: 2rem;
    }

    .collection-sidebar {
      order: 2;
    }

    .collection-main {
      order: 1;
    }

    .collection-grid {
      gap: 1.5rem;
    }

    .empty-state {
      padding: 2rem 1rem;
    }

    .load-more-btn {
      padding: 0.875rem 1.5rem;
      font-size: 0.9375rem;
    }
  }
</style>

<script>
document.addEventListener('DOMContentLoaded', function() {
  const container = document.querySelector('[data-products-container]');
  if (!container) return;

  // Load More functionality
  const loadMoreBtn = container.querySelector('[data-load-more]');
  if (loadMoreBtn) {
    loadMoreBtn.addEventListener('click', function() {
      const url = this.dataset.url;
      if (!url) return;

      // Show loading state
      const spinner = this.querySelector('.load-more-spinner');
      const text = this.querySelector('.load-more-text');
      
      spinner.style.display = 'inline-block';
      text.textContent = 'Loading...';
      this.disabled = true;

      // Fetch next page
      fetch(url)
        .then(response => response.text())
        .then(html => {
          const parser = new DOMParser();
          const doc = parser.parseFromString(html, 'text/html');
          
          // Get new products
          const newProducts = doc.querySelectorAll('.collection-grid .grid__item');
          const grid = container.querySelector('.collection-grid');
          
          // Append new products with animation
          newProducts.forEach((product, index) => {
            setTimeout(() => {
              product.style.opacity = '0';
              product.style.transform = 'translateY(20px)';
              grid.appendChild(product);
              
              // Animate in
              requestAnimationFrame(() => {
                product.style.transition = 'all 0.5s ease';
                product.style.opacity = '1';
                product.style.transform = 'translateY(0)';
              });
            }, index * 100);
          });

          // Update load more button
          const newLoadMore = doc.querySelector('[data-load-more]');
          if (newLoadMore) {
            this.dataset.url = newLoadMore.dataset.url;
            this.disabled = false;
            text.textContent = 'Load More Products';
            spinner.style.display = 'none';
            
            // Update info
            const info = container.querySelector('.load-more-info');
            const newInfo = doc.querySelector('.load-more-info');
            if (info && newInfo) {
              info.textContent = newInfo.textContent;
            }
          } else {
            // No more products
            this.style.display = 'none';
            const info = container.querySelector('.load-more-info');
            if (info) {
              info.innerHTML = '<div class="all-products-loaded">All products loaded</div>';
            }
          }
        })
        .catch(error => {
          console.error('Error loading more products:', error);
          this.disabled = false;
          text.textContent = 'Load More Products';
          spinner.style.display = 'none';
        });
    });
  }

  // Clear all filters functionality
  const clearAllBtn = container.querySelector('[data-clear-all-filters]');
  if (clearAllBtn) {
    clearAllBtn.addEventListener('click', function() {
      // Remove all URL parameters except for collection
      const url = new URL(window.location);
      const params = new URLSearchParams();
      window.location.search = params.toString();
    });
  }

  // Auto-load more on scroll (if infinite scroll is enabled)
  if (loadMoreBtn && {{ section.settings.enable_infinite_scroll | default: false }}) {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        if (entry.isIntersecting && !loadMoreBtn.disabled) {
          loadMoreBtn.click();
        }
      });
    }, {
      rootMargin: '200px'
    });

    observer.observe(loadMoreBtn);
  }

  // Update layout class based on filters
  const layout = container.closest('.page-width').querySelector('.collection-layout');
  const hasSidebar = layout.querySelector('.collection-sidebar');
  if (hasSidebar && layout) {
    layout.classList.add('has-filters');
  }
});
</script>

{% schema %}
{
  "name": "Pipeline Collection Grid",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "range",
      "id": "products_per_page",
      "min": 8,
      "max": 50,
      "step": 4,
      "default": 24,
      "label": "Products per page"
    },
    {
      "type": "range",
      "id": "columns_desktop",
      "min": 2,
      "max": 5,
      "step": 1,
      "default": 4,
      "label": "Number of columns on desktop"
    },
    {
      "type": "checkbox",
      "id": "show_filters",
      "default": true,
      "label": "Show filters sidebar"
    },
    {
      "type": "checkbox",
      "id": "enable_sticky_filters",
      "default": true,
      "label": "Sticky filters sidebar"
    },
    {
      "type": "checkbox",
      "id": "enable_infinite_scroll",
      "default": false,
      "label": "Enable infinite scroll"
    },
    {
      "type": "checkbox",
      "id": "show_progress_bar",
      "default": true,
      "label": "Show loading progress"
    },
    {
      "type": "select",
      "id": "quick_add",
      "options": [
        {
          "value": "none",
          "label": "None"
        },
        {
          "value": "button",
          "label": "Button"
        },
        {
          "value": "standard",
          "label": "Standard"
        }
      ],
      "default": "button",
      "label": "Quick add"
    },
    {
      "type": "checkbox",
      "id": "show_secondary_image",
      "default": true,
      "label": "Show second product image on hover"
    },
    {
      "type": "checkbox",
      "id": "show_vendor",
      "default": false,
      "label": "Show product vendor"
    },
    {
      "type": "checkbox",
      "id": "show_rating",
      "default": false,
      "label": "Show product rating"
    },
    {
      "type": "checkbox",
      "id": "show_quick_view",
      "default": true,
      "label": "Show quick view button"
    },
    {
      "type": "checkbox",
      "id": "show_badges",
      "default": true,
      "label": "Show product badges"
    },
    {
      "type": "checkbox",
      "id": "show_wishlist",
      "default": true,
      "label": "Show wishlist button"
    },
    {
      "type": "select",
      "id": "image_ratio",
      "options": [
        {
          "value": "adapt",
          "label": "Adapt to image"
        },
        {
          "value": "portrait",
          "label": "Portrait"
        },
        {
          "value": "square",
          "label": "Square"
        }
      ],
      "default": "square",
      "label": "Image ratio"
    },
    {
      "type": "select",
      "id": "image_shape",
      "options": [
        {
          "value": "default",
          "label": "Default"
        },
        {
          "value": "arch",
          "label": "Arch" 
        },
        {
          "value": "blob",
          "label": "Blob"
        },
        {
          "value": "chevronleft",
          "label": "Chevron left"
        },
        {
          "value": "chevronright", 
          "label": "Chevron right"
        },
        {
          "value": "diamond",
          "label": "Diamond"
        },
        {
          "value": "parallelogram",
          "label": "Parallelogram"
        },
        {
          "value": "round",
          "label": "Round"
        }
      ],
      "default": "default",
      "label": "Image shape"
    },
    {
      "type": "select",
      "id": "columns_mobile",
      "options": [
        {
          "value": "1",
          "label": "1 column"
        },
        {
          "value": "2",
          "label": "2 columns"
        }
      ],
      "default": "2",
      "label": "Number of columns on mobile"
    },
    {
      "type": "select",
      "id": "color_scheme",
      "options": [
        {
          "value": "scheme-1",
          "label": "Scheme 1"
        },
        {
          "value": "scheme-2", 
          "label": "Scheme 2"
        },
        {
          "value": "scheme-3",
          "label": "Scheme 3"
        }
      ],
      "default": "scheme-1",
      "label": "Color scheme"
    },
    {
      "type": "range",
      "id": "padding_top",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Top padding", 
      "default": 0
    },
    {
      "type": "range",
      "id": "padding_bottom",
      "min": 0,
      "max": 100,
      "step": 4,
      "unit": "px",
      "label": "Bottom padding",
      "default": 60
    }
  ],
  "presets": [
    {
      "name": "Pipeline Collection Grid"
    }
  ]
}
{% endschema %}